对任何问题，先规划，再执行
当你执行过程中任何问题，把经验教训记录回.cursorrules文件

经验教训：
1. 在处理需要获取大量数据的脚本时，最好添加进度提示，让用户知道程序运行状态
2. 使用tqdm库可以很方便地添加进度条
3. 处理网络请求时要考虑异常处理，避免因单个请求失败影响整体运行
4. 对于股票数据分析，要考虑API限制和网络延迟的影响
5. 在切换不同的AI模型API时，要注意：
   - 仔细阅读新API的文档和响应格式
   - 保持错误处理的完整性
   - 在界面上清晰显示使用的模型信息
   - 考虑流式输出等特性的兼容性
6. 在Streamlit应用中实现自动刷新功能时，要注意：
   - Streamlit的原生重新运行机制可能不够及时
   - 可以结合JavaScript实现更可靠的自动刷新
   - 使用session_state管理状态时要考虑刷新的影响
   - 避免过于频繁的页面刷新，可能影响用户体验
7. 在实现定时任务时，要注意：
   - 添加可视化的倒计时或进度提示
   - 使用session_state存储计时状态
   - 合理处理用户交互导致的计时重置
   - 避免在计时过程中出现页面卡顿
8. 在Streamlit中实现定时任务时的最佳实践：
   - 使用单一的状态管理机制，避免多重刷新冲突
   - 优先使用st.rerun()而不是JavaScript刷新
   - 使用st.empty()创建可重用的状态显示容器
   - 确保准确的时间跟踪和状态重置
   - 在页面重新加载时保持状态一致性
9. 在Streamlit中实现自动化任务时的改进方案：
   - 使用两列布局分离主要内容和控制面板
   - 提供手动控制选项，增加用户控制度
   - 使用toggle和button等原生组件代替复杂的状态管理
   - 在执行自动化任务时提供清晰的视觉反馈
   - 简化实现逻辑，避免使用复杂的计时器机制